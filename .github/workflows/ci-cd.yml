name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Code Quality & Testing
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript check
      run: npm run type-check
    
    - name: Run linter
      run: npm run lint
    
    - name: Install Playwright browsers
      run: npx playwright install chromium
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/
        retention-days: 7

  # Job 2: Build Extension
  build:
    name: Build Extension
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build extension
      run: npm run build
      env:
        NODE_ENV: production
    
    - name: Verify build output
      run: |
        echo "Checking build artifacts..."
        ls -la dist/
        test -f dist/manifest.json
        test -f dist/popup.html
        test -f dist/popup.js
        test -f dist/content.js
        test -f dist/background.js
    
    - name: Check bundle sizes
      run: |
        echo "Bundle sizes:"
        du -h dist/*.js
        # Ensure bundles are under 300KB each
        for file in dist/*.js; do
          size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
          if [ $size -gt 307200 ]; then
            echo "ERROR: $file is larger than 300KB ($size bytes)"
            exit 1
          fi
        done
    
    - name: Create extension package
      run: |
        cd dist
        zip -r ../fluent-extension.zip .
        cd ..
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: extension-package
        path: fluent-extension.zip
        retention-days: 30

  # Job 3: Deploy to Development (feature branches)
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop'
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: extension-package
    
    - name: Deploy to development
      run: |
        echo "Deploying to development environment..."
        echo "Branch: ${{ github.ref_name }}"
        # Add actual deployment steps here (e.g., upload to test Chrome Web Store account)

  # Job 4: Deploy to Staging (develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: extension-package
    
    - name: Deploy Cloudflare Worker (Staging)
      run: |
        echo "Deploying worker to staging..."
        # cd workers/cloudflare
        # npm install
        # npx wrangler deploy --env staging
    
    - name: Deploy to staging
      run: |
        echo "Deploying extension to staging environment..."
        # Add actual deployment steps here

  # Job 5: Deploy to Production (main branch)
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: extension-package
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Production deployment from commit ${{ github.sha }}
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./fluent-extension.zip
        asset_name: fluent-extension-v${{ github.run_number }}.zip
        asset_content_type: application/zip
    
    - name: Deploy Cloudflare Worker (Production)
      run: |
        echo "Deploying worker to production..."
        # cd workers/cloudflare
        # npm install
        # npx wrangler deploy --env production
    
    - name: Deploy to Chrome Web Store
      run: |
        echo "Deploying to Chrome Web Store..."
        # Add actual Chrome Web Store deployment here
        # Uses chrome-webstore-upload-cli or similar

  # Job 6: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --production
      
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD